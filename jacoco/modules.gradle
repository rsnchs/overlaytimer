apply plugin: 'jacoco'
apply plugin: "org.sonarqube"

jacoco {
    toolVersion '0.8.8'
    reportsDirectory.set(layout.projectDirectory.dir("src/jacoco"))
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

def excludes = [
        // data binding
        'android/databinding/**/*.class',
        '**/android/databinding/*Binding.class',
        '**/android/databinding/*',
        '**/androidx/databinding/*',
        '**/BR.*',
        // android
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'android/**/*.*',
        // dagger/hilt
        '**/*_MembersInjector.class',
        '**/Dagger*Component.class',
        '**/Dagger*Component$Builder.class',
        '**/Dagger*Subcomponent*.class',
        '**/*Subcomponent$Builder.class',
        '**/*Module_*Factory.class',
        '**/di/module/*',
        '**/*_Factory*.*',
        '**/*Module*.*',
        '**/*Dagger*.*',
        '**/*Hilt*.*',
        '**/dagger/hilt/internal/*',
        '**/hilt_aggregated_deps/*',
        // kotlin
        '**/*MapperImpl*.*',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/*Component*.*',
        '**/*BR*.*',
        '**/Manifest*.*',
        '**/*$Lambda$*.*',
        '**/*Companion*.*',
        '**/*MembersInjector*.*',
        '**/*_MembersInjector.class',
        '**/*_Provide*Factory*.*',
        '**/*Extensions*.*',
        // sealed and data classes
        '**/*$Result.*',
        '**/*$Result$*.*',
        '**/models/*.*',
        // adapters generated by moshi
        '**/*JsonAdapter.*',
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    reports {
        xml.required = true
        html.required = true
    }


    def mainSrc = "${project.projectDir}/src/main/java"
    def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debugUnitTest", excludes: excludes)
    def kotlinTreeModels = fileTree(dir: "${project.projectDir}/src/main/java/com/<package_dir>/model", excludes: excludes)

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([kotlinTree, kotlinTreeModels]))
    executionData.setFrom(fileTree(dir: "$project.projectDir",
            includes: ['**/*.exec', '**/*.ec']
    ))
}

sonarqube {
    properties {
        property "sonar.projectKey", "rsnchs_overlaytimer"
        property "sonar.organization", "rsnchs"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectVersion", "1.0"
        property "sonar.verbose", "true"
        property "sonar.exclusions", excludes
        property "sonar.java.coveragePlugin", "jacoco"
        property("sonar.coverage.jacoco.xmlReportPaths",
                "build/jacoco/test/jacocoTestReport.xml")
    }
}