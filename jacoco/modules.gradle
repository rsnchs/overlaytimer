apply plugin: 'jacoco'
apply plugin: "org.sonarqube"

jacoco {
    toolVersion '0.8.8'
    reportsDirectory.set(layout.projectDirectory.dir("src/jacoco"))
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    reports {
        xml.required = true
        html.required = true
    }

    def excludes = [
            // data binding
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/BR.*',
            // android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // dagger/hilt
            '**/*_MembersInjector.class',
            '**/Dagger*Component.class',
            '**/Dagger*Component$Builder.class',
            '**/Dagger*Subcomponent*.class',
            '**/*Subcomponent$Builder.class',
            '**/*Module_*Factory.class',
            '**/di/module/*',
            '**/*_Factory*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/dagger/hilt/internal/*',
            '**/hilt_aggregated_deps/*',
            // kotlin
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            // sealed and data classes
            '**/*$Result.*',
            '**/*$Result$*.*',
            '**/models/*.*',
            // adapters generated by moshi
            '**/*JsonAdapter.*',
    ]
    def mainSrc = "${project.projectDir}/src/main/java"
    def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debugUnitTest", excludes: excludes)
    def kotlinTreeModels = fileTree(dir: "${project.projectDir}/src/main/java/com/<package_dir>/model", excludes: excludes)

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([kotlinTree, kotlinTreeModels]))
    executionData.setFrom(fileTree(dir: "$project.projectDir",
            includes: ['**/*.exec', '**/*.ec']
    ))
}

sonarqube {
    def excludes = [
            // data binding
            'android/databinding/**/*.class',
            '**/android/databinding/*Binding.class',
            '**/android/databinding/*',
            '**/androidx/databinding/*',
            '**/BR.*',
            // android
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            // dagger/hilt
            '**/*_MembersInjector.class',
            '**/Dagger*Component.class',
            '**/Dagger*Component$Builder.class',
            '**/Dagger*Subcomponent*.class',
            '**/*Subcomponent$Builder.class',
            '**/*Module_*Factory.class',
            '**/di/module/*',
            '**/*_Factory*.*',
            '**/*Module*.*',
            '**/*Dagger*.*',
            '**/*Hilt*.*',
            '**/dagger/hilt/internal/*',
            '**/hilt_aggregated_deps/*',
            // kotlin
            '**/*MapperImpl*.*',
            '**/*$ViewInjector*.*',
            '**/*$ViewBinder*.*',
            '**/*Component*.*',
            '**/*BR*.*',
            '**/Manifest*.*',
            '**/*$Lambda$*.*',
            '**/*Companion*.*',
            '**/*MembersInjector*.*',
            '**/*_MembersInjector.class',
            '**/*_Provide*Factory*.*',
            '**/*Extensions*.*',
            // sealed and data classes
            '**/*$Result.*',
            '**/*$Result$*.*',
            '**/models/*.*',
            // adapters generated by moshi
            '**/*JsonAdapter.*',
    ]
    properties {
        property "sonar.projectKey", "rsnchs_overlaytimer"
        property "sonar.organization", "rsnchs"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectVersion", "1.0"
        property "sonar.verbose", "true"
        property "sonar.exclusions", excludes
        property "sonar.host.url", "https://sonarcloud.io"
//        property "sonar.sourceEncoding", "UTF-8"
//        property "sonar.test.inclusions", ["**/*Test*/**"]
//        property "sonar.branch.name", "release-develop"
//        property "sonar.branch.target", "debug"
//        property "sonar.sources", "src/main/java, src/debug/java"
//        property "sonar.sourceEncoding", "UTF-8"
//        property "sonar.test.inclusions", ["src/test/java"]

        def unit = fileTree(dir: project.projectDir, includes: ['**/*.exec']).files;
        def ui = fileTree(dir: project.projectDir, includes: ['**/*.ec']).files;
        unit.addAll(ui);
        def files = unit.join(", ");
        property "sonar.jacoco.reportPaths", files

        def reportXML = "${project.rootDir}/app/src/jacoco/jacocoTestReport/jacocoTestReport.xml"
        property "sonar.coverage.jacoco.xmlReportPaths", ["src/jacoco/jacocoTestReport/jacocoTestReport.xml", "**/jacocoTestReport/jacocoTestReport.xml", reportXML]

        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.android.lint.report", "build/reports/lint-results.xml"
        property "sonar.junit.reportsPath", "build/test-results/testDebugUnitTest"
    }
}

//jacocoTestReport {
//    reports {
//        xml.enabled true
//    }
//}
//
//sonarqube {
//properties {
//    property "sonar.projectKey", "rsnchs_overlaytimer"
//    property "sonar.organization", "rsnchs"
//    property "sonar.host.url", "https://sonarcloud.io"
//    property "sonar.sources", ["src/test", "src/main/java"]
//    property "sonar.tests", "src/test"
//    property "sonar.sourceEncoding", "UTF-8"
//    property "sonar.test.inclusions", ["src/test/java"]
//    }
//}



//project.afterEvaluate {
//
//    tasks.create(name: "debugCoverage", type: JacocoReport, dependsOn: "testDebugUnitTest") {
//
//        group = "Reporting"
//        description = "Generate Jacoco coverage reports for the debug build."
//
//        reports {
//            csv.enabled = false
//            xml.enabled = true
//            html {
//                enabled = true
//                destination file("${buildDir}/coverage-report")
//            }
//        }
//
//        def excludes = [
//            // data binding
//            'android/databinding/**/*.class',
//            '**/android/databinding/*Binding.class',
//            '**/android/databinding/*',
//            '**/androidx/databinding/*',
//            '**/BR.*',
//            // android
//            '**/R.class',
//            '**/R$*.class',
//            '**/BuildConfig.*',
//            '**/Manifest*.*',
//            '**/*Test*.*',
//            'android/**/*.*',
//            // dagger/hilt
//            '**/*_MembersInjector.class',
//            '**/Dagger*Component.class',
//            '**/Dagger*Component$Builder.class',
//            '**/Dagger*Subcomponent*.class',
//            '**/*Subcomponent$Builder.class',
//            '**/*Module_*Factory.class',
//            '**/di/module/*',
//            '**/*_Factory*.*',
//            '**/*Module*.*',
//            '**/*Dagger*.*',
//            '**/*Hilt*.*',
//            '**/dagger/hilt/internal/*',
//            '**/hilt_aggregated_deps/*',
//            // kotlin
//            '**/*MapperImpl*.*',
//            '**/*$ViewInjector*.*',
//            '**/*$ViewBinder*.*',
//            '**/*Component*.*',
//            '**/*BR*.*',
//            '**/Manifest*.*',
//            '**/*$Lambda$*.*',
//            '**/*Companion*.*',
//            '**/*MembersInjector*.*',
//            '**/*_MembersInjector.class',
//            '**/*_Provide*Factory*.*',
//            '**/*Extensions*.*',
//            // sealed and data classes
//            '**/*$Result.*',
//            '**/*$Result$*.*',
//            '**/models/*.*',
//            // adapters generated by moshi
//            '**/*JsonAdapter.*',
//        ]
//
//        def jClasses = "${project.buildDir}/intermediates/javac/debug/classes"
//        def kClasses = "${project.buildDir}/tmp/kotlin-classes/debug"
//        def javaClasses = fileTree(dir: jClasses, excludes: excludes)
//
//        def kotlinClasses = fileTree(dir: kClasses, excludes: excludes)
//
//        classDirectories.from = files([javaClasses, kotlinClasses])
//        def sourceDirs = ["${project.projectDir}/src/main/java", "${project.projectDir}/src/main/kotlin",
//                          "${project.projectDir}/src/debug/java", "${project.projectDir}/src/debug/kotlin"]
//
//        sourceDirectories.from = files(sourceDirs)
//
//        executionData.from = files(["${project.buildDir}/jacoco/testDebugUnitTest.exec"])
//    }
//
//
//}